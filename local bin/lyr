#!/usr/bin/env python3
import random, sys, os, argparse
parser = argparse.ArgumentParser()
parser.add_argument("-l", "--language", help="Translate Language")
parser.add_argument("-f", "--file", help="Specyfy file")
parser.add_argument("-p", "--path", help="Specyfy path")
parser.add_argument("-ls", "--list", help="List files", action=argparse.BooleanOptionalAction)
args = parser.parse_args()
path = '/home/wilwe/Dokumenty/orygina≈Ç/Lyrics'
if args.path != None:
    path = args.path
lis = os.popen('ls ' + path).readlines()
if args.list:
    if args.path != None:
        print(f"Path {path}")
    else:
        print(f"Default Path {path}")
    lis = list(map(str.strip, lis))
    print(' | '.join(lis))
    sys.exit()
file = lis[random.randrange(len(lis))]
file = file.strip('\n')
while os.path.isdir(f"{path}/{file}"):
    file = lis[random.randrange(len(lis))]
    file = file.strip('\n')
if args.file != None:
    file = args.file
print(file)
print('--------------------------')
if open(f"{path}/{file}").readline() == '':
    sys.exit()
lin = open(f"{path}/{file}").readlines()
line = random.randrange(len(lin))
while lin[line].strip('\n') == '':
    line += 1
print(lin[line].strip('\n'))
next = line+1
if next < len(lin):
    while lin[next].strip('\n') == '':
        if next+1 < len(lin):
            next += 1
        else: 
            break
if next < len(lin):
    print(lin[next].strip('\n'))
if args.language != None:
    print("")
    print(args.language)
    print('--------------------------')
    print(os.popen("trans -t " + args.language + " -j -brief -show-original n -show-translation Y -show-original-phonetics n -show-translation-phonetics n -show-languages n -show-dictionary n -show-alternatives n -no-ansi -no-autocorrect " + '"' + lin[line].strip('\n') + '"').read())
    print("\033[2A")
    if next < len(lin):
        print(os.popen("trans -t " + args.language + " -j -brief -show-original n -show-translation Y -show-original-phonetics n -show-translation-phonetics n -show-languages n -show-dictionary n -show-alternatives n -no-ansi -no-autocorrect " + '"' + lin[next].strip('\n') + '"').read())
