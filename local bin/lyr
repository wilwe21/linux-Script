#!/usr/bin/env python3
from bing_image_downloader import downloader
from PIL import Image, ImageDraw, ImageFont, ImageEnhance, ImageFilter
from pathlib import Path
import random, sys, os, argparse, requests, yaml, textwrap, hashlib, subprocess
parser = argparse.ArgumentParser()
parser.add_argument("-l", "--language", help="Translate Language")
parser.add_argument("-f", "--file", help="Specyfy file", nargs="*")
parser.add_argument("-p", "--path", help="Specyfy path", nargs="*")
parser.add_argument("-ol", "--oryginalang", help="Specyfy oryginal file language")
parser.add_argument("-ls", "--list", help="List files", action=argparse.BooleanOptionalAction)
parser.add_argument("-v", "--voice", help="Hear output", action=argparse.BooleanOptionalAction)
parser.add_argument("-m", "--mute", help="Mute music", action=argparse.BooleanOptionalAction)
parser.add_argument("-tv", "--tvoice", help="Hear translated output", action=argparse.BooleanOptionalAction)
parser.add_argument("-fl", "--fallbacklang", help="Fallback language to voice")
parser.add_argument("-r", "--random", help="2 line is randomized", action=argparse.BooleanOptionalAction)
parser.add_argument("-c", "--cont", help="continously", action=argparse.BooleanOptionalAction)
parser.add_argument("-tr", "--totalrandom", help="2 line is very randomized", action=argparse.BooleanOptionalAction)
parser.add_argument("-d", "--decorator", help="Decorator", default=True, action=argparse.BooleanOptionalAction)
args = parser.parse_args()
try:
    with open(f"{Path.home()}/.config/lyr.yaml", "r") as fas:
        conf = yaml.load(fas, Loader=yaml.FullLoader)
    defpath = conf["path"]
    try:
        dclen = 128-len(conf["addition"])
    except:
        dclen = 128
    try:
        cont = conf["alwayscontinue"] 
        if args.cont == None:
            if cont == True:
                args.cont = True
            else:
                cont = False
    except:
        pass
    try:
        orlang = conf["OryginalLanguage"]
    except:
        orlang = "en"
except:
    defpath = Path.home()
    orlang = "en"
if args.cont == None:
    args.cont = False
mut = ''
tran = None
totalrandom = False
voice = False
tvoice = False
language = None
forcef = None
decorator = True
randomfas = None
lista = False
pathf = None
stop = None
if args.mute != None:
    mut = '-m'
if args.voice != None:
    voice = True
if  args.tvoice != None:
    tvoice = True
if args.totalrandom != None:
    totalrandom = True
if args.oryginalang != None:
    orlang = args.oryginalang
if args.language != None:
    language = args.language
if args.decorator != True:
    decorator = False
if args.random != None:
    randomfas = True
if args.list != None:
    lista = args.list
if args.path != None:
    pathf = args.path
def getlyr():
    global path, file, file1, o1, o2, lin, next, language, lin2, tran, lis
    sus=1
    path = defpath
    if pathf != None:
        path = pathf
    lis = subprocess.check_output(['ls', path]).decode("UTF-8")
    lis = list(lis.split('\n'))
    if lista == True:
        if pathf != None:
            print(f"Path {path}")
        else:
            print(f"Default Path {path}")
        lis = list(map(str.strip, lis))
        print(' | '.join(lis).title())
        print(f"There's {len(lis)} files")
        return None
    file = lis[random.randrange(len(lis))]
    if totalrandom:
        file1 = file
    else:
        try:
            del file1
        except:
            pass
    while os.path.isdir(f"{path}/{file}"):
        file = lis[random.randrange(len(lis))]
        file = file.strip('\n')
    if args.file !=None:
        file = ' '.join(args.file)
        file = file.lower()
    if forcef != None:
        file = forcef.lower()
    if decorator == True:
        print(f'\033[38;2;203;166;247m\033[0m\033[48;2;203;166;247m\033[38;2;24;24;37m{file.title()}\033[0m\033[38;2;203;166;247m\033[0m')
    namel = "\033["+ str(len(file)+2) + "C"
    try:
        if open(f"{path}/{file}").readline() == '':
            if not totalrandom:
                sys.exit()
            else:
                sus=0
    except:
        print("ups random file picker pick wrong file of smth idk")
        return
    lin = open(f"{path}/{file}").readlines()
    if sus != 0:
        line = random.randrange(len(lin))
        while lin[line].strip('\n') == '':
            line += 1
        sas = lin[line]
    else:
        line = 1
        sas = ""
    print(sas.strip('\n'))
    next = line+1
    if next < len(lin) and not randomfas and not totalrandom:
        while lin[next].strip('\n') == '':
            if next+1 < len(lin):
                next += 1
            else: 
                break
    if randomfas:
        next = random.randrange(len(lin))
        while next > len(lin) or lin[next].strip('\n') == '':
            next = random.randrange(len(lin))
    if totalrandom:
        file = lis[random.randrange(len(lis))].strip('\n')
        while os.path.isdir(f"{path}/{file}"):
            file = lis[random.randrange(len(lis))]
            file = file.strip('\n')
        lin2 = open(f"{path}/{file}").readlines()
        if decorator == True:
            print(f'\033[2A{namel}\033[1D\033[48;2;203;166;247m\033[38;2;166;227;161m\033[0m\033[48;2;166;227;161m\033[38;2;24;24;37mAnd\033[0m\033[48;2;137;180;250m\033[38;2;166;227;161m\033[0m\033[48;2;203;166;247m\033[38;2;24;24;37m{file.title()}\033[0m\033[38;2;203;166;247m\033[0m\033[1B')
        if open(f"{path}/{file}").readline() == '':
            susy=''
        else:
            next = random.randrange(len(lin2))
            while next > len(lin2) or lin2[next].strip('\n') == '':
                next = random.randrange(len(lin2))
            susy=lin2[next]
    o1 = sas.strip('\n').replace('"', '')
    if next < len(lin) and not totalrandom:
        print(lin[next].strip('\n'))
        o2 = lin[next].strip('\n').replace('"', '')
        if voice and not tvoice:
            if mut != '':
                subprocess.run(['tts', mut, '-l', orlang, '-s' f"{o1} {o2}"])
            else:
                subprocess.run(['tts', '-l', orlang, '-s' f"{o1} {o2}"])
    elif voice and not tvoice and not totalrandom:
            if mut != '':
                subprocess.run(['tts', mut, '-l', orlang, '-s', o1])
            else:
                subprocess.run(['tts', '-l', orlang, '-s', o1])
    if next >= len(lin) and not totalrandom:
        try:
            del o2
        except:
            pass
    if totalrandom and next < len(lin2):
        print(susy.strip('\n'))
        o2 = susy.strip('\n').replace('"', '')
        if voice and not tvoice:
            if mut != '':
                subprocess.run(['tts', mut, '-l', orlang, '-s', f"{o1} {o2}"])
            else:
                subprocess.run(['tts', '-l', orlang, '-s', f"{o1} {o2}"])
    elif voice and not tvoice and totalrandom:
        if mut != '':
            subprocess.run(['tts', mut, '-l', orlang, '-s', o1])
        else:
            subprocess.run(['tts', '-l', orlang, '-s', o1])
    tran = None
    if language != None:
        tran = language
        trans(language)
def trans(langfunc: str):
    global t1, t2
    if langfunc.lower() != "braill" and langfunc.lower() != "enchant" and langfunc.lower() != "illuminati" and langfunc.lower() != "morse"  and langfunc.lower() != "spc" and langfunc.lower() != "alien":
        print("")
        if decorator == True:
            print(f'\033[38;2;166;227;161m\033[0m\033[48;2;166;227;161m\033[38;2;24;24;37m{langfunc.title()}\033[0m\033[38;2;166;227;161m\033[0m')
        t1 = subprocess.check_output(['tpl', '-l', langfunc, '-s', o1]).decode("UTF-8").strip("\n")
        print(t1)
        if args.fallbacklang != None:
            lang=args.fallbacklang
        else:
            lang=langfunc
        if next < len(lin) and not totalrandom:
            t2 = subprocess.check_output(['tpl', '-l', langfunc, '-s', o2]).decode("UTF-8").strip("\n")
            print(t2)
            if tvoice and not voice:
                if mut != '':
                    subprocess.run(['tts', mut, '-l', lang, '-s', f"{t1} {t2}"])
                else:
                    subprocess.run(['tts', '-l', lang, '-s', f"{t1} {t2}"])
        elif tvoice and not voice and not totalrandom:
            if mut != '':
                subprocess.run(['tts', mut, '-l', lang, '-s', t1])
            else:
                subprocess.run(['tts', '-l', lang, '-s', t1])
        if totalrandom and next < len(lin2):
            t2 = subprocess.check_output(['tpl', '-l', langfunc, '-s', o2]).decode("UTF-8").strip("\n")
            print(t2)
            if tvoice and not voice:
                if mut != '':
                    subprocess.run(['tts', mut, '-l', lang, '-s', f"{t1} {t2}"])
                else:
                    subprocess.run(['tts', '-l', lang, '-s', f"{t1} {t2}"])
        elif tvoice and not voice and totalrandom:
            if mut != '':
                subprocess.run(['tts', mut, '-l', lang, '-s', t1])
            else:
                subprocess.run(['tts', '-l', lang, '-s', t1])
    if voice and tvoice:
        if next < len(lin) and not totalrandom:
            if mut != '':
                subprocess.run(['tts', mut, '-l', orlang, '-s', f"{o1} {o2}", "&&", "tts", mut, "-l", lang, "-s", f"{t1} {t2}"])
            else:
                subprocess.run(['tts', '-l', orlang, '-s', f"{o1} {o2}", "&&", "tts", mut, "-l", lang, "-s", f"{t1} {t2}"])
        elif not totalrandom:
            if mut != '':
                subprocess.run(['tts', mut, '-l', orlang, '-s', o1, "&&", "tts", mut, "-l", lang, "-s", t1])
            else:
                subprocess.run(['tts', '-l', orlang, '-s', o1, "&&", "tts", mut, "-l", lang, "-s", t1])
        if totalrandom and next < len(lin2):
            if mut != '':
                subprocess.run(['tts', mut, '-l', orlang, '-s', f"{o1} {o2}", '&&', 'tts', mut, '-l', lang, '-s', f"{t1} {t2}"])
            else:
                subprocess.run(['tts', '-l', orlang, '-s', f"{o1} {o2}", '&&', 'tts', mut, '-l', lang, '-s', f"{t1} {t2}"])
        elif totalrandom:
            if mut != '':
                subprocess.run(['tts', mut, '-l', orlang, '-s', o1, "&&", "tts", mut, "-l", lang, "-s", t1])
            else:
                subprocess.run(['tts', '-l', orlang, '-s', o1, "&&", "tts", mut, "-l", lang, "-s", t1])
    elif voice and tvoice:
        if next < len(lin) and not totalrandom:
            if mut != '':
                subprocess.run([f'tts', mut, "-l", orlang, "-s", f"{o1} {o2}"])
            else:
                subprocess.run([f'tts', "-l", orlang, "-s", f"{o1} {o2}"])
        elif not totalrandom:
            if mut != '':
                subprocess.run(['tts', mut, '-l', orlang, '-s', o1])
            else:
                subprocess.run(['tts', '-l', orlang, '-s', o1])
        if totalrandom and next < len(lin2):
            if mut != '':
                subprocess.run(['tts', mut, '-l', orlang, '-s', f"{o1} {o2}"])
            else:
                subprocess.run(['tts', '-l', orlang, '-s', f"{o1} {o2}"])
        elif totalrandom:
            if mut != '':
                subprocess.run(['tts', mut, '-l', orlang, '-s', o1])
            else:
                subprocess.run(['tts', '-l', orlang, '-s', o1])
    if langfunc.lower() == "braill":
        print("")
        if decorator == True:
            print(f'\033[38;2;166;227;161m\033[0m\033[48;2;166;227;161m\033[38;2;24;24;37mBraill\033[0m\033[38;2;166;227;161m\033[0m')
        t1 = o1.replace("'","")
        t1 = subprocess.check_output(["braill", '-s', t1]).decode("UTF-8")
        print(t1)
        if next < len(lin) and not totalrandom:
            t2 = o2.replace("'","")
            t2 = subprocess.check_output(["braill", "-s", t2]).decode("UTF-8")
            print(f"\033[1A{t2}")
        if totalrandom and next < len(lin2):
            t2 = o2.replace("'","")
            t2 = subprocess.check_output(["braill", '-s', t2]).decode("UTF-8")
            print(f"\033[1A{t2}")
    if langfunc.lower() == "enchant":
        print("")
        if decorator == True:
            print(f'\033[38;2;166;227;161m\033[0m\033[48;2;166;227;161m\033[38;2;24;24;37mEnchanting Table\033[0m\033[38;2;166;227;161m\033[0m')
        t1 = o1.replace("'","¾")
        t1 = subprocess.check_output(["enchant", '-s', t1]).decode("UTF-8").replace("¾","'")
        print(t1)
        if next < len(lin) and not totalrandom:
            t2 = o2.replace("'","")
            t2 = subprocess.check_output(["enchant", '-s', t2]).decode("UTF-8").replace("¾","'")
            print(f"\033[1A{t2}")
        if totalrandom and next < len(lin2):
            t2 = o2.replace("'","")
            t2 = subprocess.check_output(["enchant", '-s', t2]).decode("UTF-8").replace("¾","'")
            print(f"\033[1A{t2}")
    if langfunc.lower() == "illuminati":
        print("")
        if decorator == True:
            print(f'\033[38;2;166;227;161m\033[0m\033[48;2;166;227;161m\033[38;2;24;24;37mIlluminaci\033[0m\033[38;2;166;227;161m\033[0m')
        t1 = o1.replace("'","¾")
        t1 = subprocess.check_output(["illuminati", '-s', t1]).decode("UTF-8").replace("¾","'")
        print(t1)
        if next < len(lin) and not totalrandom:
            t2 = o2.replace("'","¾")
            t2 = subprocess.check_output(["illuminati", '-s', t2]).decode("UTF-8").replace("¾","'")
            print(f"\033[1A{t2}")
        if totalrandom and next < len(lin2):
            t2 = o2.replace("'","¾")
            t2 = subprocess.check_output(["illuminati", '-s', t2]).decode("UTF-8").replace("¾","'")
            print(f"\033[1A{t2}")
    if langfunc.lower() == "morse":
        print("")
        if decorator == True:
            print(f'\033[38;2;166;227;161m\033[0m\033[48;2;166;227;161m\033[38;2;24;24;37mMorsy\033[0m\033[38;2;166;227;161m\033[0m')
        t1 = o1.replace("'","")
        t1 = subprocess.check_output(["morse", '-s', t1]).decode("UTF-8")
        print(t1)
        if next < len(lin) and not totalrandom:
            t2 = o2.replace("'","¾")
            t2 = subprocess.check_output(["morse", '-s', t2]).decode("UTF-8").replace("¾","'")
            print(f"\033[1A{t2}")
        if totalrandom and next < len(lin2):
            t2 = o2.replace("'","¾")
            t2 = subprocess.check_output(["morse", '-s', t2]).decode("UTF-8").replace("¾","'")
            print(f"\033[1A{t2}")
    if langfunc.lower() == "spc":
        print("")
        if decorator == True:
            print(f'\033[38;2;166;227;161m\033[0m\033[48;2;166;227;161m\033[38;2;24;24;37mSpc\033[0m\033[38;2;166;227;161m\033[0m')
        t1 = o1.replace("'","¾")
        t1 = subprocess.check_output(["spc", '-s', t1]).decode("UTF-8").replace("¾","'0")
        print(t1)
        if next < len(lin) and not totalrandom:
            t2 = o2.replace("'","")
            t2 = subprocess.check_output(["spc", '-s', t2]).decode("UTF-8").replace("¾","'0")
            print(f"\033[1A{t2}")
        if totalrandom and next < len(lin2):
            t2 = o2.replace("'","")
            t2 = subprocess.check_output(["spc", '-s', t2]).decode("UTF-8").replace("¾","'0")
            print(f"\033[1A{t2}")
    if langfunc.lower() == "alien":
        print("")
        if decorator == True:
            print(f'\033[38;2;166;227;161m\033[0m\033[48;2;166;227;161m\033[38;2;24;24;37mAliens\033[0m\033[38;2;166;227;161m\033[0m')
        t1 = o1.replace("'","¼")
        t1 = subprocess.check_output(["alien", '-s', t1]).decode("UTF-8").replace("¼","'")
        print(t1)
        if next < len(lin) and not totalrandom:
            t2 = o2.replace("'","")
            t2 = subprocess.check_output(["alien", '-s', t2]).decode("UTF-8").replace("¾","'0")
            print(f"\033[1A{t2}")
        if totalrandom and next < len(lin2):
            t2 = o2.replace("'","")
            t2 = subprocess.check_output(["alien", '-s', t2]).decode("UTF-8").replace("¾","'0")
            print(f"\033[1A{t2}")
class Bio:
    def __init__(self) -> None:
        with open(f"{Path.home()}/.config/lyr.yaml", encoding='utf-8', errors='ignore') as f:
            data = yaml.safe_load(f)
        self.data = data
        try:
            self.token = self.data["token"]
        except:
            print("token not found")
        try:
            self.add = self.data["addition"]
        except:
            pass
        self.endpoint = "https://discord.com/api/v10/users/@me/settings"
    def change(self, message: str) -> dict:
        headers = {
                "cookie": "",
                "Content-Type": "application/json",
                "Authorization": self.token
        }
        payload = {"custom_status": {"text":  message}}
        try:
            res = requests.request("PATCH", self.endpoint, json=payload, headers=headers)
            res.raise_for_status()
            print("Done")
            return res.text
        except requests.exceptions.RequestException as e:
            print(f"error: {e}")
            return
        except:
            print("Something's wrong")
    def changeInstance(self, mess):
        try:
            mess = f"{self.add}\n{mess}"
        except:
            pass
        self.change(mess)
def shorten(msg: str,leng: int,tr: bool) -> str:
    try:
        if msg != None and len(msg) > leng:
            raise ValueError()
        if msg != None:
            print("\033[92mMessage is good\033[0m")
            return msg
    except ValueError:
        msg = msg.title().replace(" ","").replace("\n","")
        if len(msg) < leng:
            print("\033[93mShorted String\033[0m")
            print(msg)
            return msg
        else:
            if not tr and language != "morse":
                msg = msg.replace(".","")
            msg = msg.replace(",","").replace("'","")
            if len(msg) < leng:
                print("\033[93mShored String\033[0m")
                print(msg)
                return(msg)
            else:
                print("\033[91mMessage is to long\033[0m")
def imgdown(koks:str, lim: int = 10) -> None:
    downloader.download(
        koks,
        limit=lim,
        output_dir=r'/home/wilwe/Obrazy/python',
        adult_filter_off=False,
        timeout=60,
        filter='',
        verbose=False
    )
def imgcreate(koks: str = None,bg: str = None, width: int = 1920, height: int = 1080, blur: int = 10, mline: int = 5) -> None:
    try:
        image = Image.open(bg).resize((width,height))
    except:
        color = (random.randint(0,255),random.randint(0,255),random.randint(0,255))
        while color == (255,255,255):
            color = (random.randint(0,255),random.randint(0,255),random.randint(0,255))
        image = Image.new("RGB",(width,height),color)
    if blur != 0:
        image = image.filter(ImageFilter.GaussianBlur(20))
    draw = ImageDraw.Draw(image)
    font = ImageFont.truetype("mononoki-Regular.ttf", 100)
    margin = offset = 270
    lineindex = 0
    for line in textwrap.wrap(koks, width=22):
        lineindex += 1
        if lineindex <= mline:
            w = draw.textlength(line,font=font)
            draw.text(((width - w)/2, offset), line, font=font, fill=(255,255,255,255),align="center",)
            offset += font.size
    lineindex = 0
    image.save(f'/home/wilwe/Obrazy/python/end/{koks}.png')
while args.cont:
    if stop == None:
        getlyr()
    else:
        stop = None
    lista = False
    try:
        b=input()
    except:
        print("")
        break
    a = b.lower()
    count = 0
    a = b.split(" ")
    b = b.split(" ")
    if any(i in ["exit",":q","q"] for i in a):
        break
    if any(i in ["v", "voice", "-v", "--voice"]for i in a):
        if voice == True:
            voice = False
        else:
            voice = True
    if any(i in ["tv", "tvoice", "-tv", "--tvoice"]for i in a):
        if tvoice == True:
            tvoice = False
        else:
            tvoice = True
    if any(i in ["m", "mute", "-m", "--mute"]for i in a):
        if mut == '':
            mut = '-m'
        else:
            mut = ''
    if any(i in ["tr", "totalrandom", "-tr", "--totalrandom"]for i in a):
        if totalrandom == True:
            totalrandom = False
            del file1
        else:
            totalrandom = True
    if any(i in ["r", "random", "-r", "--random"]for i in a):
        if randomfas == True:
            randomfas = False 
        else: 
            randomfas = True  
    if any(i in ["d", "decorator", "-d", "--decorator"]for i in a):
        if decorator == True:
            decorator = False 
        else: 
            decorator = True 
    if any(i == "open"for i in a):
        stop = True
        os.system(f'vim "{path}/{file}"')
    if any(i in ["tf", "thisfile", "-tf", "--thisfile"]for i in a):
        forcef = file
    if any(i in ["fn", "filenone", "-fn", "--filenone"]for i in a):
        forcef = None
    for i in a:
        if i in ["p", "path", "-p", "--path"]:
            try:
                if b[b.index(i)+1] == 'none':
                    pathf = None
                    args.path = None
                elif b[b.index(i)+1].count('"') == 2:
                    pathf = b[b.index(i)+1].replace('"','')
                elif '"' in b[b.index(i)+1]:
                    for l in range(len(b)-b.index(i)-1):
                        if '"' in b[b.index(i)+l+1]:
                            count += 1
                            if count == 2:
                                last = l+1
                                break
                    pathf = ' '.join(b[b.index(i)+1:b.index(i)+last+1])
                    pathf = forcef.replace('"','')
                else:
                    pathf = b[b.index(i)+1]
            except:
                pathf = None
                args.path = None
                print("Something's wrong")
        last = 0
        count = 0
        if i in ["f","file","-f","--file"]:
            try:
                if a[a.index(i)+1] == 'none':
                    forcef = None
                    args.file = None
                elif a[a.index(i)+1].count('"') == 2:
                    forcef = a[a.index(i)+1].replace('"','')
                elif '"' in a[a.index(i)+1]:
                    for l in range(len(a)-a.index(i)-1):
                        if '"' in a[a.index(i)+l+1]:
                            count += 1
                            if count == 2:
                                last = l+1
                                break
                    forcef = ' '.join(a[a.index(i)+1:a.index(i)+last+1])
                    forcef = forcef.replace('"','')
                else:
                    forcef = a[a.index(i)+1]
            except:
                forcef = None
                print("Something's wrong")
    if any(i in ["ls", "list", "-ls", "--list"]for i in a):
        lista = True
    for i in a:
        if i in ['l','language','-l','--language']:
            try:
                if a[a.index(i)+1] == 'none':
                    language = None
                else:
                    language = a[a.index(i)+1]
            except:
                language = None
                print("Something's wrong")
        if i in ["ol", "oryginalang", "-ol", "--oryginalang"]:
            try:
                if a[a.index(i)+1] == 'none':
                    orlang = None
                else:
                    orlang = a[a.index(i)+1]
            except:
                orlang = None
                print("Something's wrong")
    if any(i in ["s", "stop", "-s","--stop"]for i in a):
        if stop == None:
            stop = True
            if language != None and tran != language:
                tran = language
                trans(language)
            if voice == True:
                try:
                    subprocess.run(['tts', mut, '-l', orlang, '-s', f"{o1} {o2}"])
                except:
                    subprocess.run(['tts', mut, '-l', orlang, '-s', o1])
            if tvoice == True:
                try:
                    subprocess.run(['tts', mut, '-l', language, '-s', f"{t1} {t2}"])
                except:
                    subprocess.run(['tts', mut, '-l', language, '-s', t1])
        else:
            stop = None
    if any(i in ["ms", "messenger", "-ms", "--messenger"]for i in a):
        try:
            msg = f'{o1} {o2}'
            msgs = shorten(msg,60,False)
            if msgs != None:
                subprocess.run(['wl-copy', msgs])
        except:
            msg = o1
            msgs = shorten(msg,60,False)
            subprocess.run(['wl-copy', msgs])
    if any(i in ["tms", "transmessenger", "-tms", "--transmessenger"]for i in a):
        try:
            msg = f'{t1} {t2}'
            msgs = shorten(msg,60,True)
            subprocess.run(['wl-copy', msgs])
        except:
            try:
                msg = t1
                msgs = shorten(msg,60,True)
                subprocess.run(['wl-copy', msgs])
            except:
                print("Something's wrong")
                msg = None
    if any(i in ["ms1", "messenger1", "-ms1", "--messenger1"]for i in a):
        msg = o1
        msgs = shorten(msg,60,False)
        subprocess.run(['wl-copy', msg])
    if any(i in ["ms2", "messenger2", "-ms2", "--messenger2"]for i in a):
        msg = o2
        msgs = shorten(msg,60,False)
        subprocess.run(['wl-copy', msg])
    if any(i in ["tms1", "transmessenger1", "-tms1", "--transmessenger1"]for i in a):
        try:
            msg = t1
            msgs = shorten(msg,60,True)
            subprocess.run(['wl-copy', msgs])
        except:
            print("Something's wrong")
            msg = None
    if any(i in ["tms2", "transmessenger2", "-tms2", "--transmessenger2"]for i in a):
        try:
            msg = t2
            msgs = shorten(msg,60,True)
            subprocess.run(['wl-copy', msgs])
        except:
            print("Something's wrong")
            msg = None
    if any(i in ["cp", "copy", "-cp", "--cp"]for i in a):
        try:
            subprocess.run(['wl-copy', f"{o1}\n{o2}"])
        except:
            try:
                subprocess.run(['wl-copy', o1])
            except:
                print("something's wrong")
    if any(i in ["tcp", "transcopy", "-tcp", "--transcopy"]for i in a):
        try:   
            subprocess.run(['wl-copy', f"{t1}\n{t2}"])
        except:
            try:
                subprocess.run(['wl-copy', t1])
            except:
                print("something's wrong")
    if any(i in ["cp1", "copy1", "-cp1", "--cp1"]for i in a):
        subprocess.run(['wl-copy', o1])
    if any(i in ["tcp1", "transcopy1", "-tcp1", "--transcopy1"]for i in a):
        try:
            subprocess.run(['wl-copy', t1])
        except:
            print("something's wrong")
    if any(i in ["cp2", "copy2", "-cp2", "--cp2"]for i in a):
        try:
            subprocess.run(['wl-copy', o2])
        except:
            print("something's wrong")
    if any(i in ["tcp2", "transcopy2", "-tcp2", "--transcopy2"]for i in a):
        try:
            subprocess.run(['wl-copy', t2])
        except:
            print("something's wrong")
    if any(i in ["dc", "discord", "-dc", "--discord"]for i in a):
        try:
            mess = f'{o1}\n{o2}'
            messa = shorten(mess,dclen,False)
        except:
            try:
                mess = f'{o1}'
                messa = shorten(mess,dclen,False)
            except:
                messa = None
                print("Something's wrong")
        if messa != None:
            c = Bio()
            c.changeInstance(messa)
    if any(i in ["dc1", "discord1", "-dc1", "--discord1"]for i in a):
        try:
            mess = o1
            messa = shorten(mess,dclen,False)
        except:
            messa = None
            print("Something's wrong")
        if messa != None:
            c = Bio()
            c.changeInstance(messa)
    if any(i in ["dc2", "discord2", "-dc2", "--discord2"]for i in a):
        try:
            mess = o2
            messa = shorten(mess,dclen,False)
        except:
            messa = None
            print("Something's wrong")
        if messa != None:
            c = Bio()
            c.changeInstance(messa)
    if any(i in ["tdc", "transdiscord", "-tdc", "--tdiscord"]for i in a):
        try:
            messi = f'{t1}\n{t2}'
            messia = shorten(messi,dclen,True)
        except:
            try:
                messi = t1
                messia = shorten(messi,dclen,True)
            except:
                messia = None
                print("Something's wrong")
        if messia != None:
            bi = Bio()
            bi.changeInstance(messia)
    if any(i in ["tdc1", "transdiscord1", "-tdc1", "--tdiscord1"]for i in a):
        try:
            messi = t1
            messia = shorten(messi,dclen,True)
        except:
            messia = None
            print("Something's wrong")
        if messia != None:
            bi = Bio()
            bi.changeInstance(messia)
    if any(i in ["tdc2", "transdiscord2", "-tdc2", "--tdiscord2"]for i in a):
        try:
            messi = t2
            messia = shorten(messi,dclen,True)
        except:
            messia = None
            print("Something's wrong")
        if messia != None:
            bi = Bio()
            bi.changeInstance(messia)
    if any(i in ["do", "download", "-do", "--download"]for i in a):
        try:
            keywords: str = f'{o1} {o2}'
        except:
            keywords: str = o1
        imgdown(keywords)
    if any(i in ["tdo", "transdownload", "-tdo", "--transdownload"]for i in a):
        try:
            keywords: str = f'{t1} {t2}'
        except:
            try:
                keywords: str = t1
            except:
                keywords: "Error"
        imgdown(keywords)
    if any(i in ["tido", "titledownload", "-tido", "--titledownload"]for i in a):
        try:
            keywords: str = f'{file1} {file}'
        except:
            keywords: str = file
        imgdown(keywords)
    if any(i in ["gb", "generatebackground", "-gb", "--generatebackground"]for i in a):
        #under development
        try:
            keywords: str = f'{o1} {o2}'
        except:
            keywords: str = o1
        try:
            tit: str = f'{file1} {file}'
        except:
            tit: str = file
        imgdown(tit, 5)
        bglis = subprocess.check_output(['ls', f"/home/wilwe/Obrazy/python/{tit}"]).decode("UTF-8")
        bglis = list(bglis.split("\\n"))
        bgf = bglis[random.randrange(len(bglis))]
        bg = f"/home/wilwe/Obrazy/python/{tit}/{bgf}"
        imgcreate(keywords, bg=bg,blur=20)
    if any(i in ["gbc", "generatebackgroundcolor", "-gbc", "--generatebackgroundcolor"]for i in a):
        try:
            keywords: str = f'{o1} {o2}'.replace("/","")
            cap: str = f'{o1}\n{o2}'.replace("/","")
        except:
            keywords: str = o1.replace("/","")
            cap: str = o1.replace("/","")
        try:
            tit: str = f'{file1} {file}'
        except:
            tit: str = file
        imgcreate(keywords)
    if any(i in ["i", "index", "-i", "--index"]for i in a):
        try:
            index1 = lis.index(file1+'\n')
            index2 = lis.index(file+'\n')
            print(f"File 1: {index1+1}/{lis.index(lis[-1])+1}")
            print(f"File 2: {index2+1}/{lis.index(lis[-1])+1}")
        except:
            index = lis.index(file+'\n')
            print(f"File : {index+1}/{lis.index(lis[-1])+1}")
    if any(i in ["-qr", "--qrcode", "qr", "qrcode"]for i in a):
        try:
            subprocess.run(["qrencode", f"{o1}\n{o2}", "-o", f"{o1}\n{o2}"])
        except:
            subprocess.run(["qrencode", f"{o1}", "-o", f"{o1}"])
    if any(i in ["-tqr", "--transqrcode", "tqr", "transqrcode"]for i in a):
        try:
            subprocess.run(["qrencode", f"{t1}\n{t2}", "-o", f"{t1}\n{t2}"])
        except:
            try:
                subprocess.run(["qrencode", f"{t1}", "-o", f"{t1}"])
            except:
                print("something's wrong")
    if any(i in ["h", "help", "-h", "--help"]for i in a):
        parser.print_help()
    if any(i in ["c", "congif", "-c", "--config"]for i in a):
        stop = True
        print(f"Path: {pathf}\n\
File: {forcef}\n\
Decorator: {decorator}\n\
Randomizer: {randomfas}\n\
Oryginal language: {orlang}\n\
Translation language: {language}\n\
Total Randomizer: {totalrandom}\n\
Read oryginal: {voice}\n\
Read translation: {tvoice}\n\
Mute audio: {True if mut != ' ' else False}")
if args.cont == False:
    getlyr()
