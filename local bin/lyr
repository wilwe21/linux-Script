#!/usr/bin/env python3
import random, sys, os, argparse
parser = argparse.ArgumentParser()
parser.add_argument("-l", "--language", help="Translate Language")
parser.add_argument("-f", "--file", help="Specyfy file", nargs="*")
parser.add_argument("-p", "--path", help="Specyfy path", nargs="*")
parser.add_argument("-ol", "--oryginalang", help="Specyfy oryginal file language", default="en")
parser.add_argument("-ls", "--list", help="List files", action=argparse.BooleanOptionalAction)
parser.add_argument("-v", "--voice", help="Hear output", action=argparse.BooleanOptionalAction)
parser.add_argument("-m", "--mute", help="Mute music", action=argparse.BooleanOptionalAction)
parser.add_argument("-tv", "--tvoice", help="Hear translated output", action=argparse.BooleanOptionalAction)
parser.add_argument("-fl", "--fallbacklang", help="Fallback language to voice")
parser.add_argument("-r", "--random", help="2 line is randomized", action=argparse.BooleanOptionalAction)
parser.add_argument("-c", "--cont", help="continously", action=argparse.BooleanOptionalAction)
parser.add_argument("-tr", "--totalrandom", help="2 line is very randomized", action=argparse.BooleanOptionalAction)
parser.add_argument("-d", "--decorator", help="Decorator", default=True, action=argparse.BooleanOptionalAction)
args = parser.parse_args()
mut = ' '
tran = None
totalrandom = False
voice = False
tvoice = False
language = None
forcef = None
decorator = True
randomfas = None
lista = False
pathf = None
stop = None
if args.mute != None:
    mut = ' -m '
if args.voice != None:
    voice = True
if  args.tvoice != None:
    tvoice = True
if args.totalrandom != None:
    totalrandom = True
if args.language != None:
    language = args.language
if args.decorator != True:
    decorator = False
if args.random != None:
    randomfas = True
if args.list != None:
    lista = args.list
if args.path != None:
    pathf = args.path
def getlyr():
    global path, file, o1, o2, lin, next, language, lin2, tran
    sus=1
    path = '/home/wilwe/Dokumenty/oryginał/Lyrics'
    if pathf != None:
        path = pathf
    lis = os.popen('ls ' + path).readlines()
    if lista == True:
        if pathf != None:
            print(f"Path {path}")
        else:
            print(f"Default Path {path}")
        lis = list(map(str.strip, lis))
        print(' | '.join(lis).title())
        print(f"There's {len(lis)} files")
        return None
    file = lis[random.randrange(len(lis))].strip('\n')
    while os.path.isdir(f"{path}/{file}"):
        file = lis[random.randrange(len(lis))]
        file = file.strip('\n')
    if args.file !=None:
        file = ' '.join(args.file)
        file = file.lower()
    if forcef != None:
        file = forcef.lower()
    if decorator == True:
        print(f'\033[38;2;203;166;247m\033[0m\033[48;2;203;166;247m\033[38;2;24;24;37m{file.title()}\033[0m\033[38;2;203;166;247m\033[0m')
    namel = "\033["+ str(len(file)+2) + "C"
    try:
        if open(f"{path}/{file}").readline() == '':
            if not totalrandom:
                sys.exit()
            else:
                sus=0
    except:
        print("ups random file picker pick wrong file of smth")
        return
    lin = open(f"{path}/{file}").readlines()
    if sus != 0:
        line = random.randrange(len(lin))
        while lin[line].strip('\n') == '':
            line += 1
        sas = lin[line]
    else:
        line = 1
        sas = ""
    print(sas.strip('\n'))
    next = line+1
    if next < len(lin) and not randomfas:
        while lin[next].strip('\n') == '':
            if next+1 < len(lin):
                next += 1
            else: 
                break
    if randomfas:
        next = random.randrange(len(lin))
        while next > len(lin) or lin[next].strip('\n') == '':
            next = random.randrange(len(lin))
    if totalrandom:
        file = lis[random.randrange(len(lis))].strip('\n')
        while os.path.isdir(f"{path}/{file}"):
            file = lis[random.randrange(len(lis))]
            file = file.strip('\n')
        lin2 = open(f"{path}/{file}").readlines()
        if decorator == True:
            print(f'\033[2A{namel}\033[1D\033[48;2;203;166;247m\033[38;2;166;227;161m\033[0m\033[48;2;166;227;161m\033[38;2;24;24;37mAnd\033[0m\033[48;2;137;180;250m\033[38;2;166;227;161m\033[0m\033[48;2;203;166;247m\033[38;2;24;24;37m{file.title()}\033[0m\033[38;2;203;166;247m\033[0m\033[1B')
        if open(f"{path}/{file}").readline() == '':
            susy=''
        else:
            next = random.randrange(len(lin2))
            while next > len(lin2) or lin2[next].strip('\n') == '':
                next = random.randrange(len(lin2))
            susy=lin2[next]
    o1 = sas.strip('\n').replace('"', '')
    if next < len(lin) and not totalrandom:
        print(lin[next].strip('\n'))
        o2 = lin[next].strip('\n').replace('"', '')
        if voice and not tvoice:
            os.popen(f'tts{mut}-l {args.oryginalang} -s "{o1}" && tts{mut}-l {args.oryginalang} -s "{o2}"')
    elif voice and not tvoice and not totalrandom:
            os.popen(f'tts{mut}-l {args.oryginalang} -s "{o1}"')
    if totalrandom and next < len(lin2):
        print(susy.strip('\n'))
        o2 = susy.strip('\n').replace('"', '')
        if voice and not tvoice:
            os.popen(f'tts{mut}-l {args.oryginalang} -s "{o1}" && tts{mut}-l {args.oryginalang} -s "{o2}"')
    elif voice and not tvoice and totalrandom:
            os.popen(f'tts{mut}-l {args.oryginalang} -s "{o1}"')
    tran = None
    if language != None:
        tran = language
        trans(language)
def trans(langfunc: str):
    global t1, t2
    if langfunc.lower() != "braill" and langfunc.lower() != "enchant" and langfunc.lower() != "illuminati" and langfunc.lower() != "morse" and langfunc.lower() != "spc":
        print("")
        if decorator == True:
            print(f'\033[38;2;166;227;161m\033[0m\033[48;2;166;227;161m\033[38;2;24;24;37m{langfunc.title()}\033[0m\033[38;2;166;227;161m\033[0m')
        t1 = os.popen(f"tpl -l {langfunc} -s " + '"' + o1 + '"').read()
        print(t1)
        print("\033[3A")
        if args.fallbacklang != None:
            lang=args.fallbacklang
        else:
            lang=langfunc
        if next < len(lin) and not totalrandom:
            t2 = os.popen(f"tpl -l {langfunc} -s " + '"' + o2 + '"').read()
            print(t2)
            print("\033[2A")
            if tvoice and not voice:
                os.popen(f'tts{mut}-l {lang} -s "{t1}" && tts{mut}-l {lang} -s "{t2}"')
        elif tvoice and not voice and not totalrandom:
            os.popen(f'tts{mut}-l {lang} -s "{t1}"')
        if totalrandom and next < len(lin2):
            t2 = os.popen(f"tpl -l {langfunc} -s " + '"' + o2 + '"').read()
            print(t2)
            print("\033[2A")
            if tvoice and not voice:
                os.popen(f'tts{mut}-l {lang} -s "{t1}" && tts{mut}-l {lang} -s "{t2}"')
        elif tvoice and not voice and totalrandom:
            os.popen(f'tts{mut}-l {lang} -s "{t1}"')
    if voice and tvoice:
        if next < len(lin) and not totalrandom:
            os.popen(f'tts{mut}-l {args.oryginalang} -s "{o1}" && tts{mut}-l {args.oryginalang} -s "{o2}" && tts{mut}-l {lang} -s "{t1}" && tts{mut}-l {lang} -s "{t2}"')
        elif not totalrandom:
            os.popen(f'tts{mut}-l {args.oryginalang} -s "{o1}" && tts{mut}-l {lang} -s "{t1}""')
        if totalrandom and next < len(lin2):
            os.popen(f'tts{mut}-l {args.oryginalang} -s "{o1}" && tts{mut}-l {args.oryginalang} -s "{o2}" && tts{mut}-l {lang} -s "{t1}" && tts{mut}-l {lang} -s "{t2}"')
        elif totalrandom:
            os.popen(f'tts{mut}-l {args.oryginalang} -s "{o1}" && tts{mut}-l {lang} -s "{t1}""')
    elif voice and tvoice:
        if next < len(lin) and not totalrandom:
            os.popen(f'tts{mut}-l {args.oryginalang} -s "{o1}" && tts{mut}-l {args.oryginalang} -s "{o2}"')
        elif not totalrandom:
            os.popen(f'tts{mut}-l {args.oryginalang} -s "{o1}"')
        if totalrandom and next < len(lin2):
            os.popen(f'tts{mut}-l {args.oryginalang} -s "{o1}" && tts{mut}-l {args.oryginalang} -s "{o2}"')
        elif totalrandom:
            os.popen(f'tts{mut}-l {args.oryginalang} -s "{o1}"')
    if langfunc.lower() == "braill":
        print("")
        if decorator == True:
            print(f'\033[38;2;166;227;161m\033[0m\033[48;2;166;227;161m\033[38;2;24;24;37mBraill\033[0m\033[38;2;166;227;161m\033[0m')
        b1 = o1.replace("'","")
        print(os.popen(f"braill -s '{b1}'").read())
        if next < len(lin) and not totalrandom:
            b2 = o2.replace("'","")
            print(os.popen(f"echo \033[2A & braill -s '{b2}'").read())
        if totalrandom and next < len(lin2):
            b2 = o2.replace("'","")
            print(os.popen(f"echo \033[2A & braill -s '{b2}'").read())
    if langfunc.lower() == "enchant":
        print("")
        if decorator == True:
            print(f'\033[38;2;166;227;161m\033[0m\033[48;2;166;227;161m\033[38;2;24;24;37mEnchanting Table\033[0m\033[38;2;166;227;161m\033[0m')
        b1 = o1.replace("'","¾")
        print(os.popen(f"enchant -s '{b1}'").read().replace("¾","'"))
        if next < len(lin) and not totalrandom:
            b2 = o2.replace("'","")
            print(os.popen(f"echo \033[2A & enchant -s '{b2}'").read().replace("¾","'"))
        if totalrandom and next < len(lin2):
            b2 = o2.replace("'","")
            print(os.popen(f"echo \033[2A & enchant -s '{b2}'").read().replace("¾","'"))
    if langfunc.lower() == "illuminati":
        print("")
        if decorator == True:
            print(f'\033[38;2;166;227;161m\033[0m\033[48;2;166;227;161m\033[38;2;24;24;37mIlluminaci\033[0m\033[38;2;166;227;161m\033[0m')
        b1 = o1.replace("'","¾")
        print(os.popen(f"illuminati -s '{b1}'").read().replace("¾","'"))
        if next < len(lin) and not totalrandom:
            b2 = o2.replace("'","¾")
            print(os.popen(f"echo \033[2A & illuminati -s '{b2}'").read().replace("¾","'"))
        if totalrandom and next < len(lin2):
            b2 = o2.replace("'","¾")
            print(os.popen(f"echo \033[2A & illuminati -s '{b2}'").read().replace("¾","'"))
    if langfunc.lower() == "morse":
        print("")
        if decorator == True:
            print(f'\033[38;2;166;227;161m\033[0m\033[48;2;166;227;161m\033[38;2;24;24;37mMorsy\033[0m\033[38;2;166;227;161m\033[0m')
        b1 = o1.replace("'","")
        print(os.popen(f"morse -s '{b1}'").read())
        if next < len(lin) and not totalrandom:
            b2 = o2.replace("'","¾")
            print(os.popen(f"echo \033[2A & morse -s '{b2}'").read().replace("¾","'"))
        if totalrandom and next < len(lin2):
            b2 = o2.replace("'","¾")
            print(os.popen(f"echo \033[2A & morse -s '{b2}'").read().replace("¾","'"))
    if langfunc.lower() == "spc":
        print("")
        if decorator == True:
            print(f'\033[38;2;166;227;161m\033[0m\033[48;2;166;227;161m\033[38;2;24;24;37mSpc\033[0m\033[38;2;166;227;161m\033[0m')
        b1 = o1.replace("'","¾")
        print(os.popen(f"spc -s '{b1}'").read().replace("¾","'0"))
        if next < len(lin) and not totalrandom:
            b2 = o2.replace("'","")
            print(os.popen(f"echo \033[2A & spc -s '{b2}'").read().replace("¾","'0"))
        if totalrandom and next < len(lin2):
            b2 = o2.replace("'","")
            print(os.popen(f"echo \033[2A & spc -s '{b2}'").read().replace("¾","'0"))
while args.cont:
    if stop == None:
        getlyr()
    else:
        stop = None
    lista = False
    try:
        b=input()
    except:
        print("")
        break
    a = b.lower()
    count = 0
    a = b.split(" ")
    b = b.split(" ")
    if any(i in ["exit",":q","q"] for i in a):
        break
    if any(i in ["v", "voice", "-v", "--voice"]for i in a):
        if voice == True:
            voice = False
        else:
            voice = True
    if any(i in ["tv", "tvoice", "-tv", "--tvoice"]for i in a):
        if tvoice == True:
            tvoice = False
        else:
            tvoice = True
    if any(i in ["m", "mute", "-m", "--mute"]for i in a):
        if mut == ' ':
            mut = ' -m '
        else:
            mut = ' '
    if any(i in ["tr", "totalrandom", "-tr", "--totalrandom"]for i in a):
        if totalrandom == True:
            totalrandom = False
        else:
            totalrandom = True
    if any(i in ["r", "random", "-r", "--random"]for i in a):
        if randomfas == True:
            randomfas = False 
        else: 
            randomfas = True  
    if any(i in ["d", "decorator", "-d", "--decorator"]for i in a):
        if decorator == True:
            decorator = False 
        else: 
            decorator = True 
    if any(i == "open"for i in a):
        stop = True
        os.system(f'vim "{path}/{file}"')
    for i in a:
        if i in ["p", "path", "-p", "--path"]:
            if b[b.index(i)+1] == 'none':
                pathf = None
                args.path = None
            elif b[b.index(i)+1].count('"') == 2:
                pathf = b[b.index(i)+1].replace('"','')
            elif '"' in b[b.index(i)+1]:
                for l in range(len(b)-b.index(i)-1):
                    if '"' in b[b.index(i)+l+1]:
                        count += 1
                        if count == 2:
                            last = l+1
                            break
                pathf = ' '.join(b[b.index(i)+1:b.index(i)+last+1])
                pathf = forcef.replace('"','')
            else:
                pathf = b[b.index(i)+1]
        last = 0
        count = 0
        if i in ["f","file","-f","--file"]:
            if a[a.index(i)+1] == 'none':
                forcef = None
                args.file = None
            elif a[a.index(i)+1].count('"') == 2:
                forcef = a[a.index(i)+1].replace('"','')
            elif '"' in a[a.index(i)+1]:
                for l in range(len(a)-a.index(i)-1):
                    if '"' in a[a.index(i)+l+1]:
                        count += 1
                        if count == 2:
                            last = l+1
                            break
                forcef = ' '.join(a[a.index(i)+1:a.index(i)+last+1])
                forcef = forcef.replace('"','')
            else:
                forcef = a[a.index(i)+1]
    if any(i in ["ls", "list", "-ls", "--list"]for i in a):
        lista = True
    for i in a:
        if i in ['l','language','-l','--language']:
            if a[a.index(i)+1] == 'none':
                language = None
            else:
                language = a[a.index(i)+1]
    if any(i in ["s", "stop", "-s","--stop"]for i in a):
        if stop == None:
            stop = True
            if language != None and tran != language:
                tran = language
                trans(language)
            if voice == True:
                try:
                    os.popen(f'tts{mut}-l {args.oryginalang} -s "{o1}" && tts{mut}-l {args.oryginalang} -s "{o2}"')
                except:
                    os.popen(f'tts{mut}-l {args.oryginalang} -s "{o1}"')
            if tvoice == True:
                try:
                    os.popen(f'tts{mut}-l {language} -s "{t1}" && tts{mut}-l {language} -s "{t2}"')
                except:
                    os.popen(f'tts{mut}-l {language} -s "{t1}"')
        else:
            stop = None
if args.cont == None:
    getlyr()
