#!/usr/bin/env python3
import random, sys, os, argparse, requests, yaml, subprocess, json, time
parser = argparse.ArgumentParser()
parser.add_argument("-c", "--channel", help="Set channel")
parser.add_argument("-u", "--user", help="Set user")
parser.add_argument("-s", "--sleep", help="Set sleep time", default=5)
parser.add_argument("-p", "--pipe", help="Set pipeing", action=argparse.BooleanOptionalAction)
args = parser.parse_args()
with open(f"{os.path.expanduser("~")}/.config/lyr.yaml", encoding='utf-8', errors='ignore') as f:
    data = yaml.safe_load(f)
try:
    token = data['token']
except:
    print("no token")
    exit
try:
    channel = data['channel']
except:
    channel = None
try:
    banned = data['banned']
except:
    banned = []
try:
    user = args.user
except:
    user = None
print(banned)
if args.channel != None:
    channel = args.channel
if channel == None:
    print("No channel")
    exit
def sendMessage(message):
    url = f'https://discord.com/api/v9/channels/{channel}/messages'
    payload = {
        "content": message
    }

    headers = {
        "Authorization": token
    }
    res = requests.post(url, payload, headers=headers)
def resPons(message, resid):
    url = f'https://discord.com/api/v9/channels/{channel}/messages'
    payload = {
        "content": message,
        "message_reference": {
            "message_id": resid,
            "ignore_target_channel": False
        }
    }
    headers = {
        "Authorization": token
    }
    res = requests.post(url, json=payload, headers=headers)
    if res.status_code == 200:
        print("Succes")
    else:
        print(res.status_code)
 
def getMessage():
    url = f'https://discord.com/api/v9/channels/{channel}/messages'
    headers = {
        "Authorization": token
    }
    return requests.get(url, headers=headers)

def send(message):
    global last
    mes = message
    message = f"```\n{message}"
    if len(message) > 1997:
        chunks = []
        start = 0
        end = 1994
        while start < len(message):
            chunk = message[start:end]
            chunks.append(chunk)
            start = end
            print(f"start: {start}")
            end += 1994
            print(f"end: {end}")
        for chunk in chunks:
            if chunk == chunks[0]:
                resPons(f"{chunk}```", s[0]['id'])
            else:
                sendMessage(f"```{chunk}```")            
        last = json.loads(getMessage().content.decode('utf-8'))[0]['id']
    else:
        message = f"```\n{mes}```"
        resPons(message, s[0]['id'])
        last = json.loads(getMessage().content.decode('utf-8'))[0]['id']

def sendnodeco(message, id=False, newids=False):
    global last, ids
    if newids:
        ids = []
    mes = message
    message = f"{message}"
    if len(message) > 1997:
        chunks = []
        start = 0
        end = 1994
        while start < len(message):
            chunk = message[start:end]
            chunks.append(chunk)
            start = end
            print(f"start: {start}")
            end += 1994
            print(f"end: {end}")
        for chunk in chunks:
            if chunk == chunks[0]:
                resPons(f"{chunk}", s[0]['id'])
            else:
                sendMessage(f"{chunk}")
            if id:
                nmes = json.loads(getMessage().content.decode('utf-8'))[0]
                ids.append(nmes["id"])
        last = json.loads(getMessage().content.decode('utf-8'))[0]['id']
    else:
        message = f"{mes}"
        resPons(message, s[0]['id'])
        last = json.loads(getMessage().content.decode('utf-8'))[0]['id']
        if id:
            nmes = json.loads(getMessage().content.decode('utf-8'))[0]
            ids.append(nmes["id"])

def openfile(command):
    global ids
    fname = ' '.join(command[1:])
    ids = []
    message = subprocess.check_output(f"cat {fname}", shell=True, text=True)
    sendnodeco(message, True)
    file = json.loads(getMessage().content.decode('utf-8'))[0]
    while True:
        time.sleep(5)
        sf = json.loads(getMessage().content.decode('utf-8'))
        if sf[0]['id'] != last and sf[0]["id"] not in ids:
            fcom = sf[0]['content'].split(' ')
            print(fcom)
            if fcom[0] == ':w':
                send("Saving file")
                fin = []
                for mess in sf:
                    if mess['id'] in ids:
                        fin.append(mess['content'])
                fin = fin[::-1]
                print('\n'.join(fin))
                sendnodeco('\n'.join(fin), True, True)
                with open(f"{fname}.dctxt", "w+") as f:
                    f.write('\n'.join(fin))
            elif fcom[0] == ':q':
                send("Closing File")
                break
            elif fcom[0] == ':qw':
                send("Saving and closing file")
                fin = []
                for mess in sf:
                    if mess['id'] in ids:
                        fin.append(mess['content'])
                fin = fin[::-1]
                print('\n'.join(fin))
                send("saved and closed")
                with open(f"{fname}.dctxt", "w+") as f:
                    f.write('\n'.join(fin))
                break
            else:
                ids.append(sf[0]["id"])
            
def fileSend(path):
    global last
    url = f'https://discord.com/api/v10/channels/{channel}/messages'
    try:
        with open(path, 'rb') as f:
            fff = f.read()
        f, ext = os.path.splitext(os.path.basename(path))
    except:
        return
    headers = {
        "Authorization": token,
    }
    data = {
        'file': (f"{f}{ext}", fff),
    }
    res = requests.post(url, headers=headers, files=data)
    last = json.loads(getMessage().content.decode('utf-8'))[0]['id']
    if res.status_code == 200:
        print("Succes")
    elif res.status_code == 413:
        send("File is Too large")
        last = json.loads(getMessage().content.decode('utf-8'))[0]['id']
    else:
        print(res.status_code)
        print(res.content)


if __name__ == '__main__':
    last = json.loads(getMessage().content.decode('utf-8'))[0]["id"]
    print('ready')
    while True:
        time.sleep(1)
        s = json.loads(getMessage().content.decode('utf-8'))
        if user != None:
            if s[0]["author"]['global_name'] != user:
                #print(s[0]["author"]["global_name"])
                print(f"not {user}")
                continue
        if s[0]['id'] != last:
            if args.pipe != False:
                try:
                    rfid = s[0]['message_reference']["message_id"]
                    for mmm in s:
                        if mmm["id"] == rfid:
                            pipe = mmm['content']
                except:
                    pipe = None
            else:
                pipe = None
            try:
                command = s[0]['content'].split(' ')
                if any(word.lower() in banned for word in s[0]['content'].split()):
                    send('Command Contain banned word')
                    last = json.loads(getMessage().content.decode('utf-8'))[0]['id']
                    continue
                if command[0] == 'cd':
                    os.chdir(' '.join(command[1:]))
                    send('changed directory')
                elif command[0] == 'exit':
                    send("Goodbye")
                    break
                elif command[0] == 'vim':
                    openfile(command)
                elif command[0] == 'open':
                    path = command[1:]
                    send(f"Sending file {' '.join(command[1:])}")
                    fileSend(' '.join(path))
                elif command[0] == 'dc-chroot':
                    os.popen(f"mkdir {' '.join(command[1:])}/root/.config")
                    os.popen(f"echo 'token: {token}' &> {' '.join(command[1:])}/root/.config/lyr.yaml")
                    os.popen(f"cp {os.path.abspath(__file__)} {' '.join(command[1:])}/root/dcterm")
                    send(f"chroot to {' '.join(command[1:])}")
                    subprocess.Popen(f"arch-chroot {' '.join(command[1:])} /bin/bash -c /root/dcterm -c {channel}", shell=True, text=True).wait()
                elif command[0] == 'banned':
                    send(banned)
                else:
                    if pipe != None:
                        if ' '.join(command)[-1] == "'":
                            send(subprocess.check_output(f"{' '.join(command)} {pipe}'", shell=True, text=True))
                        elif ' '.join(command)[-1] == '"':
                            send(subprocess.check_output(f'{" ".join(command)} {pipe}"', shell=True, text=True))
                        else:
                            send(subprocess.check_output(f"{' '.join(command)} {pipe}", shell=True, text=True))
                    else:
                        send(subprocess.check_output(' '.join(command), shell=True, text=True))
            except Exception as e:
                resPons(f'```{e}```',s[0]['id'])
                last = json.loads(getMessage().content.decode('utf-8'))[0]['id']
                continue
