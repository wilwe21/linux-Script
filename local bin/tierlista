#!/usr/bin/env python3
import os, subprocess, argparse, random, yaml
parser = argparse.ArgumentParser()
parser.add_argument("-f", "--file", help="Define file")
parser.add_argument("-t", "--tiers", help="Define Tiers", nargs="*")
args = parser.parse_args()
colors = ["\x1b[48;2;243;139;168;30m","\x1b[48;2;250;179;135;30m","\x1b[48;2;249;226;175;30m","\x1b[48;2;166;227;161;30m","\x1b[48;2;148;226;213;30m","\x1b[48;2;137;180;250;30m"]
def read_items(file_path):
    with open(file_path, 'r') as file:
        items = [line.strip() for line in file]
    return items
def save(data: dict, susd: str = "yaml"):
    name: str = file.split('/')
    f = open(f"tierlista {name[-1]}", 'w+')
    if susd.lower() == "yaml":
        print("saved yaml file")
        yaml.dump(data, f, sort_keys=False, allow_unicode=True)
    elif susd.lower() == "normal":
        print("saved as normal file")
        if args.tiers != None:
            for tier in range(len(args.tiers)):
                f.write("—————————————————————————————————————————————\n")
                f.write(f"{tier} {' | '.join(yam[tier])}\n")
            f.write("—————————————————————————————————————————————\n")
        else:
            f.write("—————————————————————————————————————————————\n")
            f.write(f"| S | {' | '.join(yam['S'])}\n")
            f.write("—————————————————————————————————————————————\n")
            f.write(f"| A | {' | '.join(yam['A'])}\n")
            f.write("—————————————————————————————————————————————\n")
            f.write(f"| B | {' | '.join(yam['B'])}\n")
            f.write("—————————————————————————————————————————————\n")
            f.write(f"| C | {' | '.join(yam['C'])}\n")
            f.write("—————————————————————————————————————————————\n")
            f.write(f"| D | {' | '.join(yam['D'])}\n")
            f.write("—————————————————————————————————————————————\n")
            f.write(f"| F | {' | '.join(yam['F'])}\n")
            f.write("—————————————————————————————————————————————\n")
def askforsave(data):
    print("\x1b[2K\x1b[999999DSave to file?")
    try:
        sas = input("")
    except:
        exit()
    sas = sas.split(" ")
    if any(s in ["y","yes"]for s in sas):
        sav = True
    else:
        sav = False
    for i in sas:
        if i in ["mode","m","normal","yaml","no","ya"]:
            try:
                mode = sas[sas.index(i)+1]
                print(f"Using mode: {mode}")
            except:
                if i not in ["normal", "yaml", "no", "ya"]:
                    print("No mode declared using yaml")
                    mode = "yaml"
                else:
                    mode = i
                    print(f"Using mode: {mode}")
    if sav:
        save(data, mode)
if args.tiers != None:
    tiers = [f"{colors[random.randrange(len(colors))] if args.tiers.index(i) >= len(colors) else colors[args.tiers.index(i)]}| {i} |\x1b[0m" for i in args.tiers]
    yam = {f"{tier}": [] for tier in args.tiers}
else:
    tiers = ["\x1b[48;2;243;139;168;30m| S |\x1b[0m","\x1b[48;2;250;179;135;30m| A |\x1b[0m","\x1b[48;2;249;226;175;30m| B |\x1b[0m","\x1b[48;2;166;227;161;30m| C |\x1b[0m","\x1b[48;2;148;226;213;30m| D |\x1b[0m","\x1b[48;2;137;180;250;30m| F |\x1b[0m"]
    yam = {"S": [], "A": [], "B": [], "C": [], "D": [], "F": []}
if args.file == None:
    file = str(subprocess.check_output(["zenity", "--file-selection"]))
    file = file.strip("b'").strip("\\n'")
else:
    file = args.file
print("\x1bc")
items = read_items(file)
for tier in range(len(tiers)):
    print ("\x1b[31m—————————————————————————————————————————————\x1b[0m")
    print(tiers[tier])
print ("\x1b[31m—————————————————————————————————————————————\x1b[0m")
for i in items:
    print (i)
    if i == items[-1]:
        print("Last")
    try:
        x = str(input('Tier: '))
    except:
        askforsave(yam)
        exit()
    if x in ['exit',':q']:
        break
    print("\x1bc")
    if args.tiers != None:
        for tier in range(len(args.tiers)):
            if x.lower() == args.tiers[tier].lower():
                tiers[tier] += f" {i} |"
                yam[args.tiers[tier]].append(i)
            print ("\x1b[31m—————————————————————————————————————————————\x1b[0m")
            print(tiers[tier])
        print ("\x1b[31m—————————————————————————————————————————————\x1b[0m")
    else:
        if x.lower() == 's':
            tiers[0] += f" {i} |"
            yam["S"].append(i)
        if x.lower() == 'a':
            tiers[1] += f" {i} |"
            yam["A"].append(i)
        if x.lower() == 'b':
            tiers[2] += f" {i} |"
            yam["B"].append(i)
        if x.lower() == 'c':
            tiers[3] += f" {i} |"
            yam["C"].append(i)
        if x.lower() == 'd':
            tiers[4] += f" {i} |"
            yam["D"].append(i)
        if x.lower() == 'f':
            tiers[5] += f" {i} |"
            yam["F"].append(i)
        print ("\x1b[31m—————————————————————————————————————————————\x1b[0m")
        print (tiers[0])
        print ("\x1b[31m—————————————————————————————————————————————\x1b[0m")
        print (tiers[1])
        print ("\x1b[31m—————————————————————————————————————————————\x1b[0m")
        print (tiers[2])
        print ("\x1b[31m—————————————————————————————————————————————\x1b[0m")
        print (tiers[3])
        print ("\x1b[31m—————————————————————————————————————————————\x1b[0m")
        print (tiers[4])
        print ("\x1b[31m—————————————————————————————————————————————\x1b[0m")
        print (tiers[5])
        print ("\x1b[31m—————————————————————————————————————————————\x1b[0m")
asktosave(yam)
