#!/usr/bin/env python3
import math, numpy
class funkcja():
    def __init__(self,nonx,x):
        self.x = x
        self.a = nonx
        self.sol = set()
    def print(self):
        end = ""
        ar = {}
        for num, i in enumerate(self.x):
            if i != 0:
                ar[num] = i
        for key, value in ar.items():
            end += f"+{value}x{key+1 if key+1 > 1 else ''}"
        if self.a != "":
            end+= f"+{self.a}"
        return end
    def delta(self):
        if sum(self.x[2:]) > 0:
            if sum(self.x[3:]) > 0:
                raise ValueError("4")
            self.p = (3*self.x[2]*self.x[0] - self.x[1]**2) / (9 * self.x[2]**2)
            self.q = (9*self.x[0]*self.x[1]*self.x[2] - 27*self.x[2]**2*self.a) / (54*self.a**3)
            self.delt = self.p**3 + self.q**2
        else:
            self.delt = self.x[0]**2-4*self.x[1]*self.a
    def pierwiastek(self):
        self.delta()
        try:
            pierdel = math.sqrt(self.delt)
        except:
            pierdel = "ujemna wyszÅ‚a"
        return pierdel
    def miejsca0(self):
        self.delta()
        if sum(self.x[2:]) > 0:
            if sum(self.x[3:]) > 0:
                raise ValueError("4")
            for n in range(3):
                self.sol.add((2 * numpy.sqrt(-self.p / 3) * numpy.cos(numpy.acos((-3 * self.q) * numpy.sqrt(-3 * self.p) / (2 * self.p ** 2)) / 3 + 2 * numpy.pi * n / 3)) - (self.x[1] / (3 * self.x[2])))
        if self.delt > 0 and self.x[1] != 0:
            self.sol.add((-1*self.x[0]+self.delt)/(2*self.x[1]))
            self.sol.add((-1*self.x[0]-self.delt)/(2*self.x[1]))
        else:
            self.sol.add(-self.a/self.x[0])
    def new(liczba):
        end = []
        st = ""
        for i in liczba:
            if liczba[0] == i:
                st += i
            elif i == "+":
                end.append(st)
                st = ""
            elif i == "-":
                end.append(st)
                st = i
            else:
                st += i
        if end[-1] != st:
            end.append(st)
        nonx = []
        x = [[] for _ in range(10000)]
        for i in end:
            cur = ""
            sas = ""
            for j in i:
                if j == "x":
                    cur += j
                elif cur == "x":
                    sas += j
            if cur == "":
                nonx.append(i)
            else:
                try:
                    x[int(sas)-1].append(i)
                except:
                    x[0].append(i)
        ennonx = [int(i) for i in nonx]
        a = sum(ennonx)
        enx = [sum([int(j.replace(f"x{en+1 if en+1 > 1 else ''}", "") if j[0] != "x" else 1) for j in i]) for en, i in enumerate(x)]
        return funkcja(a, enx)

if __name__ == "__main__":
    print("Daj funkcje chuju: ")
    a = input()
    fun = funkcja.new(a)
    print(fun.print())
    fun.miejsca0()
    print(fun.sol)
    #print(fun.delt)
    try:
        print(fun.p)
        print(fun.q)
    except:
        pass
