#!/usr/bin/env python3
from bing_image_downloader import downloader
from PIL import Image, ImageDraw, ImageFont, ImageEnhance, ImageFilter
import random, sys, os, subprocess, argparse, requests, yaml, textwrap, hashlib
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-bg", "--background", help="Background", default=None)
    parser.add_argument("-r", "--red", help="Background red", type=int)
    parser.add_argument("-g", "--green", help="Background green", type=int)
    parser.add_argument("-b", "--blue", help="Background blue", type=int)
    parser.add_argument("-genbg", "--generatebackground", help="Generate Background", default=False, action=argparse.BooleanOptionalAction)
    parser.add_argument("-t", "--text", help="Text", default=None)
    parser.add_argument("-v", "--voice", help="Voice", default=False, action=argparse.BooleanOptionalAction)
    args = parser.parse_args()
def imgdown(koks:str, lim: int = 10, unsafe: bool = False) -> None:
    downloader.download(
        koks,
        limit=lim,
        output_dir=r'/home/wilwe/Obrazy/python',
        adult_filter_off=unsafe,
        timeout=60,
        filter='',
        verbose=False
    )
def imgcreate(koks: str = None,bg: str = None, width: int = 1920, height: int = 1080, blur: int = 10, path: str = None) -> None:
    try:
        image = Image.open(bg).resize((width,height))
    except:
        try:
            if args.red != None or args.green != None or args.blue != None:
                try:
                    if args.red == None:
                        args.red = 0
                    if args.green == None:
                        args.green = 0
                    if args.blue == None:
                        args.blue = 0
                    color = (args.red,args.green,args.blue)
                except:
                    print(args.red,args.green,args.blue)
                    print("It's not a int")
                    return
            else:
                raise ValueError
        except:
            color = (random.randint(0,255),random.randint(0,255),random.randint(0,255))
            while color == (255,255,255):
                color = (random.randint(0,255),random.randint(0,255),random.randint(0,255))
        image = Image.new("RGB",(width,height),color)
    if blur != 0:
        image = image.filter(ImageFilter.GaussianBlur(20))
    draw = ImageDraw.Draw(image)
    font = ImageFont.truetype("mononoki-Regular.ttf", 100)
    margin = offset = 270
    for line in textwrap.wrap(koks, width=22):
        w = draw.textlength(line,font=font)
        draw.text(((width - w)/2, offset), line, font=font, fill=(255,255,255,255),align="center")
        offset += font.size
    if path == None:
        image.save(f'/home/wilwe/Obrazy/python/end/{koks}.png')
    else:
        image.save(path)
def genbg(text: str = None, count: int = 5, blur: int = 20):
    imgdown(text, count)
    bglis = os.popen(f'ls "/home/wilwe/Obrazy/python/{text}"').readlines()
    bgf = bglis[random.randrange(len(bglis))].strip("\n")
    bg = f"/home/wilwe/Obrazy/python/{text}/{bgf}"
    try:
        imgcreate(text, bg=bg, blur=blur)
    except:
        pass
if __name__ == "__main__":
    if args.text == None:
        args.text: str = input("Give text: ") 
    if args.generatebackground:
        genbg(args.text, 5)    
        if args.voice:
            subprocess.Popen(["espeak", "-v", "pl", args.text, "-w", f"{args.text}.wav"])
            process = subprocess.Popen(["ffmpeg", "-y", "-loop", "1", "-i", f"{args.text}.png", "-i", f"{args.text}.wav", "-shortest", "-c:v", "libx264", f"{args.text}.mp4"])
            process.wait()
        exit()
    if args.background != None:
        imgcreate(args.text, bg=args.background, blur=20, path=f"{args.text}.png")
        if args.voice:
            subprocess.Popen(["espeak", "-v", "pl", args.text, "-w", f"{args.text}.wav"])
            process = subprocess.Popen(["ffmpeg", "-y", "-loop", "1", "-i", f"{args.text}.png", "-i", f"{args.text}.wav", "-shortest", "-c:v", "libx264", f"{args.text}.mp4"])
            process.wait()
    else:
        try:
            imgcreate(args.text, bg=bg,blur=20, path=f"{args.text}.png")
            if args.voice:
                subprocess.Popen(["espeak", "-v", "pl", args.text, "-w", f"{args.text}.wav"])
                process = subprocess.Popen(["ffmpeg", "-y", "-loop", "1", "-i", f"{args.text}.png", "-i", f"{args.text}.wav", "-shortest", "-c:v", "libx264", f"{args.text}.mp4"])
                process.wait()
        except:
            imgcreate(args.text, path=f"{args.text}.png")
            if args.voice:
                subprocess.Popen(["espeak", "-v", "pl", args.text, "-w", f"{args.text}.wav"])
                process = subprocess.Popen(["ffmpeg", "-y", "-loop", "1", "-i", f"{args.text}.png", "-i", f"{args.text}.wav", "-shortest", "-c:v", "libx264", f"{args.text}.mp4"])
                process.wait()

