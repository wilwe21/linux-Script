#!/usr/bin/env python3
from PIL import Image, ImageDraw, ImageFont, ImageEnhance, ImageFilter
from math import ceil
import argparse, textwrap, requests, yaml, os
def create(mes,ft="NotoSansNerdFont-Regular.ttf", cl=(255,255,255,255),wi=70,hi=120, fts=114):
    width = wi*70
    wrap = textwrap.wrap(mes, width=wi)
    pn = 20
    pngs = ceil(len(wrap)/pn)
    for z in range(pngs):
        sas = wrap[z*pn:(z+1)*pn]
        s = []
        for i in sas:
            if "\n" in i:
                c = i.split("\n")
                for j in c:
                    s.append(j)
            else:
                s.append(i)
        height = hi*(len(s))
        color = (0,0,0)
        image = Image.new("RGB",(width,height),color)
        draw = ImageDraw.Draw(image)
        font = ImageFont.truetype(font=ft, size=fts)
        margin = offset = 1
        for line in s:
            if upper == True:
                te = line.upper()
            elif lower == True:
                te = line.lower()
            else:
                te = line
            w = draw.textlength(te,font=font)
            draw.text(((width - w)/2, offset), te, font=font, fill=cl,align="center")
            offset += font.size
        image.save(f"{path}{z}.png")
        if args.channel != None:
            send(args.channel, f"{path}{z}.png")
        else:
            print("not sending no channel")
def send(chan, img):
    if token == None:
        print("Can't sand to discord no token in .config/lyr.yaml")
        exit()
    url = f'https://discord.com/api/v10/channels/{chan}/messages'
    try:
        with open(img, 'rb') as f:
            fff = f.read()
        f, ext = os.path.splitext(os.path.basename(img))
    except:
        print("no file. what?")
        return
    headers = {
        "Authorization": token,
    }
    data = {
        'file': (f"{f}{ext}", fff),
    }
    res = requests.post(url, headers=headers, files=data)
    if res.status_code == 200:
        print("Succes")
    elif res.status_code == 413:
        send("File is Too large")
        last = json.loads(getMessage().content.decode('utf-8'))[0]['id']
    else:
        print(res.status_code)
        print(res.content)
if __name__ == "__main__":
    global path, upper, lower
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--channel", help="Set channel")
    parser.add_argument("-f", "--file", help="File")
    parser.add_argument("-m", "--message", help="Message")
    parser.add_argument("-ft", "--font", help="Font")
    parser.add_argument("-fts", "--fontsize", help="Fontsize")
    parser.add_argument("-hi", "--height", help="height of line", default=120)
    parser.add_argument("-wi", "--width", help="width of line", default=70)
    parser.add_argument("-u", "--upper", help="Uppercase", action=argparse.BooleanOptionalAction)
    parser.add_argument("-l", "--lower", help="Lowercase", action=argparse.BooleanOptionalAction)
    parser.add_argument("-col", "--color", help="set color")
    args = parser.parse_args()
    lower = args.lower
    upper = args.upper
    with open("/home/wilwe/.config/lyr.yaml", encoding="utf-8", errors="ignore") as f:
        data = yaml.safe_load(f)
    token = data['token']
    path = '/home/wilwe/Obrazy/python/end/test'
    if args.file != None:
        s = open(args.file, "r").read()
        if args.font == None and args.color == None and args.fontsize == None:
            create(s, wi=int(args.width), hi=int(args.height))
        elif args.color == None and args.fontsize == None:
            create(s, ft=args.font, wi=int(args.width), hi=int(args.height))
        elif args.font == None and args.fontisze == None:
            color = tuple([int(x) for x in args.color.split(",")])
            create(s, cl=color, wi=int(args.width), hi=int(args.height))
        elif args.color == None:
            create(s, ft=args.font, wi=int(args.width), hi=int(args.height), fts=int(args.fontsize))
        elif args.font == None:
            color = tuple([int(x) for x in args.color.split(",")])
            create(s, cl=color, wi=int(args.width), hi=int(args.height), fts=int(args.fontsize))
        elif args.fontsize = None:
            color = tuple([int(x) for x in args.color.split(",")])
            create(s, ft=args.font, cl=color, wi=int(args.width), hi=int(args.height))
        else:
            color = tuple([int(x) for x in args.color.split(",")])
            create(s, ft=args.font, cl=color, wi=int(args.width), hi=int(args.height), fts=int(args.fontsize))
    elif args.message != None: 
        if args.font == None and args.color == None and args.fontsize == None:
            create(args.message, wi=int(args.width), hi=int(args.height))
        elif args.color == None and args.fontsize == None:
            create(args.message, ft=args.font, wi=int(args.width), hi=int(args.height))
        elif args.font == None and args.fontsize == None:
            color = tuple([int(x) for x in args.color.split(",")])
            create(args.message, cl=color, wi=int(args.width), hi=int(args.height))
        elif args.color == None:
            create(args.messaage, ft=args.font, wi=int(args.width), hi=int(args.height), fts=int(args.fontsize))
        elif args.font == None:
            color = tuple([int(x) for x in args.color.split(",")])
            create(args.messaage, cl=color, wi=int(args.width), hi=int(args.height), fts=int(args.fontsize))
        elif args.fontsize = None:
            color = tuple([int(x) for x in args.color.split(",")])
            create(args.messaage, ft=args.font, cl=color, wi=int(args.width), hi=int(args.height))
        else:
            color = tuple([int(x) for x in args.color.split(",")])
            create(args.message, ft=args.font, cl=color, wi=int(args.width), hi=int(args.height), fts= int(args.fontsize))
    else:
        print("No file")
