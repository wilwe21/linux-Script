#!/usr/bin/env python3
import os, requests, yaml, subprocess, magic
files = os.environ.get('NAUTILUS_SCRIPT_SELECTED_FILE_PATHS').splitlines()
with open("/home/wilwe/.config/lyr.yaml", encoding='utf-8', errors='ignore') as f:
    data = yaml.safe_load(f)
token = data['token']
channel = subprocess.check_output(['zenity', '--entry', f'--text=Channel']).decode("utf-8").replace("\n", '')
if (channel == ""):
    channel = data['channel']
def sendMessage(message):
    url = f'https://discord.com/api/v9/channels/{channel}/messages'
    payload = {
        "content": message
    }

    headers = {
        "Authorization": token
    }
    res = requests.post(url, payload, headers=headers)
def sendAttachment(file):
    try:
        with open(file, 'rb') as f:
            fff = f.read()
        f, ext = os.path.splitext(os.path.basename(file))
    except Exception as e:
        os.popen(f"zenity --error --text='{e}'")
        return
    url = f'https://discord.com/api/v9/channels/{channel}/messages'
    data = {
        "file": (f"{f}{ext}", fff)
    }

    headers = {
        "Authorization": token
    }
    try:
        res = requests.post(url, files=data, headers=headers)
        res.raise_for_status()
    except Exception as e:
        os.popen(f"zenity -error --text='{e}'")
    
for file in files:
    format = magic.from_file(file, mime=True)
    if (format != "text/plain"):
        sendAttachment(file)
    else:
        message = "".join(open(file, "r").readlines())
        if len(message) > 2000:
            chunks = []
            start = 0
            end = 2000
            while start < len(message):
                chunk = message[start:end]
                chunks.append(chunk)
                start = end
                end += 2000
            for chunk in chunks:
                sendMessage(chunk)
        else:
            sendMessage(message)
